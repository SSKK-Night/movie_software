// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SkillLevel {
  A
  B
  C
  D
  E
  F
}

enum VideoStatus {
  draft
  in_review
  completed
}

enum TaskStatus {
  pending
  in_progress
  done
}

enum AdminRole {
  superadmin
  editor
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  passwordHash  String
  skillLevel    SkillLevel
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  videos        Video[]
  comments      Comment[]
  ratings       VideoRating[]
  skillHistory  SkillHistory[]
  assignedTasks VideoTask[]    @relation("AssignedTasks")
}

model Admin {
  id            String     @id @default(uuid())
  username      String     @unique
  email         String     @unique
  passwordHash  String
  role          AdminRole  @default(editor)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Video {
  id            String         @id @default(uuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  title         String
  description   String
  videoUrl      String
  thumbnailUrl  String
  status        VideoStatus    @default(draft)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  comments      Comment[]
  ratings       VideoRating[]
  tasks         VideoTask[]
}

model Comment {
  id          String     @id @default(uuid())
  video       Video      @relation(fields: [videoId], references: [id])
  videoId     String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  timestamp   Float      // 秒数で位置指定
  x           Float      // 0〜1の相対座標
  y           Float
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SkillHistory {
  id           String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  skillLevel   SkillLevel
  evaluatedAt  DateTime
}

model VideoRating {
  id           String     @id @default(uuid())
  video        Video      @relation(fields: [videoId], references: [id])
  videoId      String
  evaluator    User       @relation(fields: [evaluatorId], references: [id])
  evaluatorId  String
  score        Int        // 1〜5
  comment      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model VideoTask {
  id           String      @id @default(uuid())
  video        Video       @relation(fields: [videoId], references: [id])
  videoId      String
  title        String
  description  String?
  status       TaskStatus  @default(pending)
  assignee     User?       @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId   String?
  dueDate      DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
